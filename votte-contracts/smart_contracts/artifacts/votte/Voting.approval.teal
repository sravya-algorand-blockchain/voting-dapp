#pragma version 10

smart_contracts.votte.contract.Voting.approval_program:
    intcblock 0 1
    bytecblock "" "option1Votes" "option2Votes" "option3Votes" "option4Votes" "noOfOptions" "startsAt" "endsAt" "vote_status" "title" "description" "option1" "option2" "option3" "option4" "localState"
    txn ApplicationID
    bnz main_after_if_else@2
    callsub __init__

main_after_if_else@2:
    callsub __puya_arc4_router__
    return


// smart_contracts.votte.contract.Voting.__init__() -> void:
__init__:
    // smart_contracts/votte/contract.py:20
    // def __init__(self) -> None:
    proto 0 0
    // smart_contracts/votte/contract.py:21
    // self.title = String("")
    bytec 9 // "title"
    bytec_0 // ""
    app_global_put
    // smart_contracts/votte/contract.py:22
    // self.description = String("")
    bytec 10 // "description"
    bytec_0 // ""
    app_global_put
    // smart_contracts/votte/contract.py:23
    // self.noOfOptions = UInt64(0)
    bytec 5 // "noOfOptions"
    intc_0 // 0
    app_global_put
    // smart_contracts/votte/contract.py:24
    // self.option1 = String("")
    bytec 11 // "option1"
    bytec_0 // ""
    app_global_put
    // smart_contracts/votte/contract.py:25
    // self.option2 = String("")
    bytec 12 // "option2"
    bytec_0 // ""
    app_global_put
    // smart_contracts/votte/contract.py:26
    // self.option3 = String("")
    bytec 13 // "option3"
    bytec_0 // ""
    app_global_put
    // smart_contracts/votte/contract.py:27
    // self.option4 = String("")
    bytec 14 // "option4"
    bytec_0 // ""
    app_global_put
    // smart_contracts/votte/contract.py:28
    // self.option1Votes = UInt64(0)
    bytec_1 // "option1Votes"
    intc_0 // 0
    app_global_put
    // smart_contracts/votte/contract.py:29
    // self.option2Votes = UInt64(0)
    bytec_2 // "option2Votes"
    intc_0 // 0
    app_global_put
    // smart_contracts/votte/contract.py:30
    // self.option3Votes = UInt64(0)
    bytec_3 // "option3Votes"
    intc_0 // 0
    app_global_put
    // smart_contracts/votte/contract.py:31
    // self.option4Votes = UInt64(0)
    bytec 4 // "option4Votes"
    intc_0 // 0
    app_global_put
    // smart_contracts/votte/contract.py:32
    // self.startsAt = UInt64(0)
    bytec 6 // "startsAt"
    intc_0 // 0
    app_global_put
    // smart_contracts/votte/contract.py:33
    // self.endsAt = UInt64(0)
    bytec 7 // "endsAt"
    intc_0 // 0
    app_global_put
    // smart_contracts/votte/contract.py:34
    // self.vote_status = UInt64(0)
    bytec 8 // "vote_status"
    intc_0 // 0
    app_global_put
    retsub


// smart_contracts.votte.contract.Voting.__puya_arc4_router__() -> uint64:
__puya_arc4_router__:
    // smart_contracts/votte/contract.py:4
    // class Voting(ARC4Contract):
    proto 0 1
    txn NumAppArgs
    bz __puya_arc4_router___bare_routing@7
    pushbytess 0x2916b6e9 0x31d5c300 0x30c6d58a // method "create_vote(string,string,uint64,string,string,string,string,uint64)void", method "vote(uint64)void", method "opt_in()void"
    txna ApplicationArgs 0
    match __puya_arc4_router___create_vote_route@2 __puya_arc4_router___vote_route@3 __puya_arc4_router___opt_in_route@4
    intc_0 // 0
    retsub

__puya_arc4_router___create_vote_route@2:
    // smart_contracts/votte/contract.py:37
    // @abimethod()
    txn OnCompletion
    !
    assert // OnCompletion is not NoOp
    txn ApplicationID
    assert // can only call when not creating
    // smart_contracts/votte/contract.py:4
    // class Voting(ARC4Contract):
    txna ApplicationArgs 1
    extract 2 0
    txna ApplicationArgs 2
    extract 2 0
    txna ApplicationArgs 3
    btoi
    txna ApplicationArgs 4
    extract 2 0
    txna ApplicationArgs 5
    extract 2 0
    txna ApplicationArgs 6
    extract 2 0
    txna ApplicationArgs 7
    extract 2 0
    txna ApplicationArgs 8
    btoi
    // smart_contracts/votte/contract.py:37
    // @abimethod()
    callsub create_vote
    intc_1 // 1
    retsub

__puya_arc4_router___vote_route@3:
    // smart_contracts/votte/contract.py:57
    // @abimethod()
    txn OnCompletion
    !
    assert // OnCompletion is not NoOp
    txn ApplicationID
    assert // can only call when not creating
    // smart_contracts/votte/contract.py:4
    // class Voting(ARC4Contract):
    txna ApplicationArgs 1
    btoi
    // smart_contracts/votte/contract.py:57
    // @abimethod()
    callsub vote
    intc_1 // 1
    retsub

__puya_arc4_router___opt_in_route@4:
    // smart_contracts/votte/contract.py:78
    // @abimethod(allow_actions=['OptIn'])
    txn OnCompletion
    intc_1 // OptIn
    ==
    assert // OnCompletion is not OptIn
    txn ApplicationID
    assert // can only call when not creating
    intc_1 // 1
    retsub

__puya_arc4_router___bare_routing@7:
    // smart_contracts/votte/contract.py:4
    // class Voting(ARC4Contract):
    txn OnCompletion
    bnz __puya_arc4_router___after_if_else@11
    txn ApplicationID
    !
    assert // can only call when creating
    intc_1 // 1
    retsub

__puya_arc4_router___after_if_else@11:
    // smart_contracts/votte/contract.py:4
    // class Voting(ARC4Contract):
    intc_0 // 0
    retsub


// smart_contracts.votte.contract.Voting.create_vote(title: bytes, description: bytes, noOfOptions: uint64, option1: bytes, option2: bytes, option3: bytes, option4: bytes, endsAt: uint64) -> void:
create_vote:
    // smart_contracts/votte/contract.py:37-38
    // @abimethod()
    // def create_vote(self,title:String,description:String,noOfOptions:UInt64,option1:String,option2:String,option3:String,option4:String,endsAt:UInt64) -> None:
    proto 8 0
    // smart_contracts/votte/contract.py:39
    // assert self.vote_status == 0, "Vote already created"
    intc_0 // 0
    bytec 8 // "vote_status"
    app_global_get_ex
    assert // check self.vote_status exists
    !
    assert // Vote already created
    // smart_contracts/votte/contract.py:40
    // assert noOfOptions>=2 and noOfOptions<=4, "Number of options should be between 2 and 4"
    frame_dig -6
    pushint 2 // 2
    >=
    bz create_vote_bool_false@3
    frame_dig -6
    pushint 4 // 4
    <=
    bz create_vote_bool_false@3
    intc_1 // 1
    b create_vote_bool_merge@4

create_vote_bool_false@3:
    intc_0 // 0

create_vote_bool_merge@4:
    // smart_contracts/votte/contract.py:40
    // assert noOfOptions>=2 and noOfOptions<=4, "Number of options should be between 2 and 4"
    assert // Number of options should be between 2 and 4
    // smart_contracts/votte/contract.py:41
    // assert Global.latest_timestamp < endsAt, "Invalid end time"
    global LatestTimestamp
    frame_dig -1
    <
    assert // Invalid end time
    // smart_contracts/votte/contract.py:42
    // self.title = title
    bytec 9 // "title"
    frame_dig -8
    app_global_put
    // smart_contracts/votte/contract.py:43
    // self.description = description
    bytec 10 // "description"
    frame_dig -7
    app_global_put
    // smart_contracts/votte/contract.py:44
    // self.noOfOptions = noOfOptions
    bytec 5 // "noOfOptions"
    frame_dig -6
    app_global_put
    // smart_contracts/votte/contract.py:45
    // self.option1 = option1
    bytec 11 // "option1"
    frame_dig -5
    app_global_put
    // smart_contracts/votte/contract.py:46
    // self.option2 = option2
    bytec 12 // "option2"
    frame_dig -4
    app_global_put
    // smart_contracts/votte/contract.py:47
    // self.option3 = option3
    bytec 13 // "option3"
    frame_dig -3
    app_global_put
    // smart_contracts/votte/contract.py:48
    // self.option4 = option4
    bytec 14 // "option4"
    frame_dig -2
    app_global_put
    // smart_contracts/votte/contract.py:49
    // self.option1Votes = UInt64(0)
    bytec_1 // "option1Votes"
    intc_0 // 0
    app_global_put
    // smart_contracts/votte/contract.py:50
    // self.option2Votes = UInt64(0)
    bytec_2 // "option2Votes"
    intc_0 // 0
    app_global_put
    // smart_contracts/votte/contract.py:51
    // self.option3Votes = UInt64(0)
    bytec_3 // "option3Votes"
    intc_0 // 0
    app_global_put
    // smart_contracts/votte/contract.py:52
    // self.option4Votes = UInt64(0)
    bytec 4 // "option4Votes"
    intc_0 // 0
    app_global_put
    // smart_contracts/votte/contract.py:53
    // self.startsAt = Global.latest_timestamp
    bytec 6 // "startsAt"
    global LatestTimestamp
    app_global_put
    // smart_contracts/votte/contract.py:54
    // self.endsAt = endsAt
    bytec 7 // "endsAt"
    frame_dig -1
    app_global_put
    // smart_contracts/votte/contract.py:55
    // self.vote_status = UInt64(1)
    bytec 8 // "vote_status"
    intc_1 // 1
    app_global_put
    retsub


// smart_contracts.votte.contract.Voting.vote(option: uint64) -> void:
vote:
    // smart_contracts/votte/contract.py:57-58
    // @abimethod()
    // def vote(self, option: UInt64) -> None:
    proto 1 0
    // smart_contracts/votte/contract.py:59
    // assert Global.latest_timestamp < self.endsAt, "Voting has ended"
    global LatestTimestamp
    intc_0 // 0
    bytec 7 // "endsAt"
    app_global_get_ex
    assert // check self.endsAt exists
    <
    assert // Voting has ended
    // smart_contracts/votte/contract.py:60
    // assert Global.latest_timestamp > self.startsAt, "Voting has not started"
    global LatestTimestamp
    intc_0 // 0
    bytec 6 // "startsAt"
    app_global_get_ex
    assert // check self.startsAt exists
    >
    assert // Voting has not started
    // smart_contracts/votte/contract.py:61
    // assert option>=1 and option<=self.noOfOptions, "Invalid option"
    frame_dig -1
    intc_1 // 1
    >=
    bz vote_bool_false@3
    intc_0 // 0
    bytec 5 // "noOfOptions"
    app_global_get_ex
    assert // check self.noOfOptions exists
    frame_dig -1
    >=
    bz vote_bool_false@3
    intc_1 // 1
    b vote_bool_merge@4

vote_bool_false@3:
    intc_0 // 0

vote_bool_merge@4:
    // smart_contracts/votte/contract.py:61
    // assert option>=1 and option<=self.noOfOptions, "Invalid option"
    assert // Invalid option
    // smart_contracts/votte/contract.py:63
    // val,exist = self.localState.maybe(Txn.sender)
    txn Sender
    intc_0 // 0
    bytec 15 // "localState"
    app_local_get_ex
    bury 1
    // smart_contracts/votte/contract.py:64
    // assert not exist, "Already voted"
    !
    assert // Already voted
    // smart_contracts/votte/contract.py:65
    // self.localState[Txn.sender] = option
    txn Sender
    bytec 15 // "localState"
    frame_dig -1
    app_local_put
    // smart_contracts/votte/contract.py:66-76
    // match option:
    //     case 1:
    //         self.option1Votes += 1
    //     case 2:
    //         self.option2Votes += 1
    //     case 3:
    //         self.option3Votes += 1
    //     case 4:
    //         self.option4Votes += 1
    //     case _:
    //         op.exit(0)
    frame_dig -1
    switch vote_switch_case_default@9 vote_switch_case_0@5 vote_switch_case_1@6 vote_switch_case_2@7 vote_switch_case_3@8
    // smart_contracts/votte/contract.py:76
    // op.exit(0)
    err

vote_switch_case_0@5:
    // smart_contracts/votte/contract.py:68
    // self.option1Votes += 1
    intc_0 // 0
    bytec_1 // "option1Votes"
    app_global_get_ex
    assert // check self.option1Votes exists
    intc_1 // 1
    +
    bytec_1 // "option1Votes"
    swap
    app_global_put
    b vote_switch_case_next@10

vote_switch_case_1@6:
    // smart_contracts/votte/contract.py:70
    // self.option2Votes += 1
    intc_0 // 0
    bytec_2 // "option2Votes"
    app_global_get_ex
    assert // check self.option2Votes exists
    intc_1 // 1
    +
    bytec_2 // "option2Votes"
    swap
    app_global_put
    b vote_switch_case_next@10

vote_switch_case_2@7:
    // smart_contracts/votte/contract.py:72
    // self.option3Votes += 1
    intc_0 // 0
    bytec_3 // "option3Votes"
    app_global_get_ex
    assert // check self.option3Votes exists
    intc_1 // 1
    +
    bytec_3 // "option3Votes"
    swap
    app_global_put
    b vote_switch_case_next@10

vote_switch_case_3@8:
    // smart_contracts/votte/contract.py:74
    // self.option4Votes += 1
    intc_0 // 0
    bytec 4 // "option4Votes"
    app_global_get_ex
    assert // check self.option4Votes exists
    intc_1 // 1
    +
    bytec 4 // "option4Votes"
    swap
    app_global_put
    b vote_switch_case_next@10

vote_switch_case_default@9:
    // smart_contracts/votte/contract.py:76
    // op.exit(0)
    err

vote_switch_case_next@10:
    retsub
